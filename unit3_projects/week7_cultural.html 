<!DOCTYPE html> 
<html>
<head>
    <link href="../stylesheets/week7_cultural.css" rel="stylesheet">
    <link href='http://fonts.googleapis.com/css?family=Lobster' rel='stylesheet' type='text/css'>
    

</head>
<body>
  <header>
    <img src="../images/matt.jpg">
      <h1>DBC Blog</h1>
         <ul class="toolbar">
           <li><a href="#">My Facebook</a></li>
           <li><a href="#">My Twitter</a></li>
           <li><a href="#">My Github</a></li>
        
         </ul>
  </header>
    <div class="canvas">
      <h2>May 26th, 2014</h2>
      <h2>You down with OOP?</h2>
        <p>I'm sure by now, many of us are aware that Ruby is an objecte-oriented programming language.  Today, I'll discuss exactly what that means.  I'll also be talking a little bit about what functional programming is and how it relates to OO languages. We'll start by talking about what makes a language like Ruby, object-oriented.</p>
        
      <h2>What makes a language Object-Oriented?</h2>
        <p>Object oriented languages seem to be fairly popular right now, so let's take a closer look at what makes an OO language.  "Object-oriented languages define not only the data type of a data structure, but also the types of operations that can be applied to the data structure." This basically means that data structure becomes an object.  In languages like Ruby and Java, everything is an objet.  This allows programmers to create relationship and functions between multiple objects.  Languages that are OO based also gives programmers the ability to make their programs inherit characteristics of other objects through the usage of classes. 
</p>
        
        <p>One of the best advantages that object-oriented languages have over other languages is that programmers do not have to change variables as they create new objects. A programmer can simply create a new object that inherits many of its features from existing objects. This makes object-oriented programs easier to modify.</p>
      
     
        
      <h2>The major characteristics of functional programming:</h2> 
        
        <p>Remember how I previously mentioned that OOP languages use objects to create data structures.  Well functional programming languages use functions, instead of objects, as the primary building block of the code. Let's take a closer look at each. 
        </p>
      <h2>Which language should you choose:</h2>
         <p>We should now have a better understanding of how each of these languages work.  Now that we have analyzed each language, which one should we use going forward.  In short, that depends.  Both languages have their advantages.</p>
         <p>     
<strong>O</strong>bject-oriented languages are perfect if you have a fixed amount of operations that need to be performed. As your code progresses, you will add new objects that have similar operations.  We are able to create these new objects and methods through the usage of classes.  Classes allow us to create new objects and functions related to that class, without messing with other objects.
         </p>
        
         <p>
<strong>F</strong>unctional languages are good when you have a fixed number of objects and add new functions to these objects as your code evolves. This can be accomplished by adding new functions which compute with existing data types, and the existing functions are left alone. If you still can't decide which language to learn, remember that both languages serve a purpose and will have their own place in the sun. As the saying goes, "Choose the right tool for the job."</p>
        
        
        <br />
        <br />
        <br />
        
      <h3>Happy coding,<br /> 
            <em>Matt</em></h3>
    
    </div>

</body>

    
</html>